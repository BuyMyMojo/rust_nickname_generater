var searchIndex = JSON.parse('{\
"rust_nickname_generater":{"doc":"“ay that’s where the ’stralian accent comes through…","t":[0,5,5,5,5,5,5,5,0,0,4,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17],"n":["error","generate_name","generate_random_name","get_all_template_examples","get_all_template_names","get_all_templates","get_template_by_name","get_templates_of_type","template_struct","templates","Error","LengthLimit","NoValidName","Result","StringTemplate","UsernameLenConversionFailed","borrow","borrow_mut","eq","fmt","fmt","from","from","from","into","to_string","try_from","try_into","type_id","vzip","0","0","Function","FunctionVar","Macro","NameInfo","NameTemplate","NameType","Var","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contents","example","fmt","fmt","fmt","from","from","from","info","into","into","into","len","name","name_type","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","FUNCTION_TEMPLTES","FUNCTION_VARIABLE_TEMPLTES","MACRO_TEMPLTES","VARIABLE_TEMPLTES"],"q":["rust_nickname_generater","","","","","","","","","","rust_nickname_generater::error","","","","","","","","","","","","","","","","","","","","rust_nickname_generater::error::Error","","rust_nickname_generater::template_struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_nickname_generater::templates","","",""],"d":["","Given a username and <code>NameTemplate</code> output the rendered name","Generate a random name that fits within a specified …","Returns a Vec of all template examples","Returns a Vec of all template names","Returns a Vec of all built in templates","Returns an option with a template with the given name","Returns a Vec of templates matching specified type","","All of the templates built into this lib are meant to …","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A list of function looking templates","A list of templates with the username inside a function","A list of templates with the username inside a macro","A list of variable looking templates"],"i":[0,0,0,0,0,0,0,0,0,0,0,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,19,8,8,8,0,0,0,8,2,17,8,2,17,8,2,17,8,2,17,8,2,2,2,17,8,2,17,8,2,2,17,8,17,2,17,2,17,8,2,17,8,2,17,8,2,17,8,2,17,8,0,0,0,0],"f":[0,[[1,2],[[3,[1]]]],[[1,4],[[3,[1]]]],[[],[[5,[1]]]],[[],[[5,[1]]]],[[],[[5,[2]]]],[6,[[7,[2]]]],[8,[[5,[2]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[9,9],10],[[9,11],12],[[9,11],12],[[]],[13,9],[14,9],[[]],[[],1],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[17,17],[8,8],[[]],[[]],[[]],0,0,[[2,11],12],[[17,11],12],[[8,11],12],[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,0,0],"p":[[3,"String"],[3,"NameTemplate"],[6,"Result"],[15,"u64"],[3,"Vec"],[15,"str"],[4,"Option"],[4,"NameType"],[4,"Error"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TemplateError"],[3,"TryFromIntError"],[4,"Result"],[3,"TypeId"],[3,"NameInfo"],[13,"StringTemplate"],[13,"UsernameLenConversionFailed"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
